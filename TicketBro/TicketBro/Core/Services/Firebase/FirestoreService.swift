//
//  FirestoreService.swift
//  TicketBro
//
//  Created by Admin Bookie on 5.05.25.
//


// Core/Services/Firebase/FirestoreService.swift
import Foundation
import Firebase
import FirebaseFirestore
import Combine

// –ë–∞–∑–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Firestore
class FirestoreService<T: Codable & Identifiable> {
    private let db = Firestore.firestore()
    private let collectionPath: String
    
    init(collectionPath: String) {
        self.collectionPath = collectionPath
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    func getAll() -> AnyPublisher<[T], Error> {
        print("üì° –ó–∞–ø—Ä–æ—Å –≤—Å–µ—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ \(collectionPath)")
        
        return Future<[T], Error> { [weak self] promise in
            guard let self = self else {
                print("‚ùå –°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                promise(.failure(NSError(domain: "FirestoreService", code: -1, userInfo: [NSLocalizedDescriptionKey: "–°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"])))
                return
            }
            
            self.db.collection(self.collectionPath).getDocuments { snapshot, error in
                if let error = error {
                    print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ \(self.collectionPath): \(error.localizedDescription)")
                    promise(.failure(error))
                    return
                }
                
                guard let documents = snapshot?.documents else {
                    print("‚ö†Ô∏è –ö–æ–ª–ª–µ–∫—Ü–∏—è \(self.collectionPath) –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                    promise(.success([]))
                    return
                }
                
                print("‚úÖ –ü–æ–ª—É—á–µ–Ω–æ \(documents.count) –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ \(self.collectionPath)")
                
                do {
                    let items: [T] = try documents.compactMap { document in
                        return try document.data(as: T.self)
                    }
                    
                    print("‚úÖ –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–æ \(items.count) –æ–±—ä–µ–∫—Ç–æ–≤ –∏–∑ \(documents.count) –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
                    if items.count < documents.count {
                        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å")
                    }
                    
                    promise(.success(items))
                } catch {
                    print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: \(error.localizedDescription)")
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ ID
    func getById(id: String) -> AnyPublisher<T?, Error> {
        return Future<T?, Error> { [weak self] promise in
            guard let self = self else {
                promise(.failure(NSError(domain: "FirestoreService", code: -1, userInfo: [NSLocalizedDescriptionKey: "–°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"])))
                return
            }
            
            self.db.collection(self.collectionPath).document(id).getDocument { snapshot, error in
                if let error = error {
                    promise(.failure(error))
                    return
                }
                
                guard let snapshot = snapshot, snapshot.exists else {
                    promise(.success(nil))
                    return
                }
                
                do {
                    let item = try snapshot.data(as: T.self)
                    promise(.success(item))
                } catch {
                    promise(.failure(error))
                }
            }
        }.eraseToAnyPublisher()
    }
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    func add(item: T) -> AnyPublisher<T, Error> {
        return Future<T, Error> { [weak self] promise in
            guard let self = self else {
                promise(.failure(NSError(domain: "FirestoreService", code: -1, userInfo: [NSLocalizedDescriptionKey: "–°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"])))
                return
            }
            
            do {
                let reference = try self.db.collection(self.collectionPath).addDocument(from: item)
                
                // –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                reference.getDocument { snapshot, error in
                    if let error = error {
                        promise(.failure(error))
                        return
                    }
                    
                    do {
                        if let createdItem = try snapshot?.data(as: T.self) {
                            promise(.success(createdItem))
                        } else {
                            promise(.failure(NSError(domain: "FirestoreService", code: -1, userInfo: [NSLocalizedDescriptionKey: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç"])))
                        }
                    } catch {
                        promise(.failure(error))
                    }
                }
            } catch {
                promise(.failure(error))
            }
        }.eraseToAnyPublisher()
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    func update(id: String, item: T) -> AnyPublisher<T, Error> {
        return Future<T, Error> { [weak self] promise in
            guard let self = self else {
                promise(.failure(NSError(domain: "FirestoreService", code: -1, userInfo: [NSLocalizedDescriptionKey: "–°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"])))
                return
            }
            
            do {
                try self.db.collection(self.collectionPath).document(id).setData(from: item)
                
                // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                self.db.collection(self.collectionPath).document(id).getDocument { snapshot, error in
                    if let error = error {
                        promise(.failure(error))
                        return
                    }
                    
                    do {
                        if let updatedItem = try snapshot?.data(as: T.self) {
                            promise(.success(updatedItem))
                        } else {
                            promise(.failure(NSError(domain: "FirestoreService", code: -1, userInfo: [NSLocalizedDescriptionKey: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç"])))
                        }
                    } catch {
                        promise(.failure(error))
                    }
                }
            } catch {
                promise(.failure(error))
            }
        }.eraseToAnyPublisher()
    }
    
    // –£–¥–∞–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ ID
    func delete(id: String) -> AnyPublisher<Void, Error> {
        return Future<Void, Error> { [weak self] promise in
            guard let self = self else {
                promise(.failure(NSError(domain: "FirestoreService", code: -1, userInfo: [NSLocalizedDescriptionKey: "–°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"])))
                return
            }
            
            self.db.collection(self.collectionPath).document(id).delete { error in
                if let error = error {
                    promise(.failure(error))
                } else {
                    promise(.success(()))
                }
            }
        }.eraseToAnyPublisher()
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –ø–æ–ª—é
    func query(field: String, isEqualTo value: Any) -> AnyPublisher<[T], Error> {
        return Future<[T], Error> { [weak self] promise in
            guard let self = self else {
                promise(.failure(NSError(domain: "FirestoreService", code: -1, userInfo: [NSLocalizedDescriptionKey: "–°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"])))
                return
            }
            
            self.db.collection(self.collectionPath)
                .whereField(field, isEqualTo: value)
                .getDocuments { snapshot, error in
                    if let error = error {
                        promise(.failure(error))
                        return
                    }
                    
                    guard let documents = snapshot?.documents else {
                        promise(.success([]))
                        return
                    }
                    
                    do {
                        let items: [T] = try documents.compactMap { document in
                            try document.data(as: T.self)
                        }
                        promise(.success(items))
                    } catch {
                        promise(.failure(error))
                    }
                }
        }.eraseToAnyPublisher()
    }
    
    // –ù–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    func observeCollection() -> AnyPublisher<[T], Error> {
        let subject = PassthroughSubject<[T], Error>()
        
        let listener = db.collection(collectionPath).addSnapshotListener { snapshot, error in
            if let error = error {
                subject.send(completion: .failure(error))
                return
            }
            
            guard let documents = snapshot?.documents else {
                subject.send([])
                return
            }
            
            do {
                let items: [T] = try documents.compactMap { document in
                    try document.data(as: T.self)
                }
                subject.send(items)
            } catch {
                subject.send(completion: .failure(error))
            }
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å, —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –µ–≥–æ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ
        return subject
            .handleEvents(receiveCancel: {
                listener.remove() // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–æ–¥–ø–∏—Å–∫–∏
            })
            .eraseToAnyPublisher()
    }
    
    // –ù–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ
    func observeDocument(id: String) -> AnyPublisher<T?, Error> {
        let subject = PassthroughSubject<T?, Error>()
        
        let listener = db.collection(collectionPath).document(id).addSnapshotListener { snapshot, error in
            if let error = error {
                subject.send(completion: .failure(error))
                return
            }
            
            guard let snapshot = snapshot, snapshot.exists else {
                subject.send(nil)
                return
            }
            
            do {
                let item = try snapshot.data(as: T.self)
                subject.send(item)
            } catch {
                subject.send(completion: .failure(error))
            }
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å, —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –µ–≥–æ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ
        return subject
            .handleEvents(receiveCancel: {
                listener.remove() // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–æ–¥–ø–∏—Å–∫–∏
            })
            .eraseToAnyPublisher()
    }
}
